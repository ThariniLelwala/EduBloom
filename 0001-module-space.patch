From adf27d29c76340e6bd52a61617a32b5a80334123 Mon Sep 17 00:00:00 2001
From: PasinduAnjana <pasinduanjana000@gmail.com>
Date: Sun, 19 Oct 2025 11:40:00 +0530
Subject: [PATCH] module space

---
 backend/controllers/studentController.js      | 394 +++++++
 backend/db/db-init.js                         |  51 +
 backend/routes/studentRoutes.js               | 136 +++
 backend/server.js                             |   8 +
 backend/services/studentService.js            | 364 +++++++
 frontend/config/googleDrive.config.js         |  27 +
 frontend/css/dashboard/modulespace.css        |  26 +
 frontend/css/dashboard/quiz.css               |   2 +-
 frontend/css/dashboard/subject.css            | 251 +++++
 .../student/modulespace/modulespace.html      |  90 ++
 .../student/modulespace/subject.html          | 124 +++
 frontend/data/sidebar.json                    |   2 +-
 frontend/js/modulespace.js                    | 348 +++++++
 frontend/js/subject.js                        | 977 ++++++++++++++++++
 frontend/js/topic.js                          |   0
 15 files changed, 2798 insertions(+), 2 deletions(-)
 create mode 100644 backend/controllers/studentController.js
 create mode 100644 backend/routes/studentRoutes.js
 create mode 100644 backend/services/studentService.js
 create mode 100644 frontend/config/googleDrive.config.js
 create mode 100644 frontend/css/dashboard/modulespace.css
 create mode 100644 frontend/css/dashboard/subject.css
 create mode 100644 frontend/dashboards/student/modulespace/modulespace.html
 create mode 100644 frontend/dashboards/student/modulespace/subject.html
 create mode 100644 frontend/js/modulespace.js
 create mode 100644 frontend/js/subject.js
 create mode 100644 frontend/js/topic.js

diff --git a/backend/controllers/studentController.js b/backend/controllers/studentController.js
new file mode 100644
index 0000000..c75fde3
--- /dev/null
+++ b/backend/controllers/studentController.js
@@ -0,0 +1,394 @@
+// controllers/studentController.js
+const studentService = require("../services/studentService");
+const { parseRequestBody } = require("../middleware/authMiddleware");
+
+class StudentController {
+  /**
+   * Create a new subject
+   * POST /api/student/subjects/create
+   */
+  async createSubject(req, res) {
+    try {
+      const data = await parseRequestBody(req);
+      const { name, description } = data;
+      const studentId = req.user.id;
+
+      if (!name) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Subject name is required" }));
+        return;
+      }
+
+      const subject = await studentService.createSubject(
+        studentId,
+        name,
+        description || null
+      );
+
+      res.writeHead(201, { "Content-Type": "application/json" });
+      res.end(
+        JSON.stringify({
+          message: "Subject created successfully",
+          subject,
+        })
+      );
+    } catch (err) {
+      res.writeHead(400, { "Content-Type": "application/json" });
+      res.end(JSON.stringify({ error: err.message }));
+    }
+  }
+
+  /**
+   * Get all subjects for the student
+   * GET /api/student/subjects
+   */
+  async getSubjects(req, res) {
+    try {
+      const studentId = req.user.id;
+      const subjects = await studentService.getStudentSubjects(studentId);
+
+      res.writeHead(200, { "Content-Type": "application/json" });
+      res.end(
+        JSON.stringify({
+          message: "Subjects retrieved successfully",
+          subjects,
+        })
+      );
+    } catch (err) {
+      res.writeHead(400, { "Content-Type": "application/json" });
+      res.end(JSON.stringify({ error: err.message }));
+    }
+  }
+
+  /**
+   * Get a specific subject with its topics
+   * GET /api/student/subjects/:subjectId
+   */
+  async getSubject(req, res) {
+    try {
+      const studentId = req.user.id;
+      const pathname = req.url.split("?")[0];
+      const subjectId = parseInt(pathname.split("/").pop());
+
+      if (!subjectId || isNaN(subjectId)) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Invalid subject ID" }));
+        return;
+      }
+
+      const subject = await studentService.getSubjectWithTopics(
+        subjectId,
+        studentId
+      );
+
+      res.writeHead(200, { "Content-Type": "application/json" });
+      res.end(
+        JSON.stringify({
+          message: "Subject retrieved successfully",
+          subject,
+        })
+      );
+    } catch (err) {
+      res.writeHead(400, { "Content-Type": "application/json" });
+      res.end(JSON.stringify({ error: err.message }));
+    }
+  }
+
+  /**
+   * Update a subject
+   * PUT /api/student/subjects/:subjectId
+   */
+  async updateSubject(req, res) {
+    try {
+      const data = await parseRequestBody(req);
+      const studentId = req.user.id;
+      const pathname = req.url.split("?")[0];
+      const subjectId = parseInt(pathname.split("/").pop());
+
+      if (!subjectId || isNaN(subjectId)) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Invalid subject ID" }));
+        return;
+      }
+
+      const subject = await studentService.updateSubject(
+        subjectId,
+        studentId,
+        data
+      );
+
+      res.writeHead(200, { "Content-Type": "application/json" });
+      res.end(
+        JSON.stringify({
+          message: "Subject updated successfully",
+          subject,
+        })
+      );
+    } catch (err) {
+      res.writeHead(400, { "Content-Type": "application/json" });
+      res.end(JSON.stringify({ error: err.message }));
+    }
+  }
+
+  /**
+   * Delete a subject
+   * DELETE /api/student/subjects/:subjectId
+   */
+  async deleteSubject(req, res) {
+    try {
+      const studentId = req.user.id;
+      const pathname = req.url.split("?")[0];
+      const subjectId = parseInt(pathname.split("/").pop());
+
+      if (!subjectId || isNaN(subjectId)) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Invalid subject ID" }));
+        return;
+      }
+
+      const result = await studentService.deleteSubject(subjectId, studentId);
+
+      res.writeHead(200, { "Content-Type": "application/json" });
+      res.end(JSON.stringify(result));
+    } catch (err) {
+      res.writeHead(400, { "Content-Type": "application/json" });
+      res.end(JSON.stringify({ error: err.message }));
+    }
+  }
+
+  /**
+   * Create a topic within a subject
+   * POST /api/student/subjects/:subjectId/topics/create
+   */
+  async createTopic(req, res) {
+    try {
+      const data = await parseRequestBody(req);
+      const { name, description } = data;
+      const studentId = req.user.id;
+      const pathname = req.url.split("?")[0];
+      const subjectId = parseInt(pathname.split("/")[4]);
+
+      if (!subjectId || isNaN(subjectId)) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Invalid subject ID" }));
+        return;
+      }
+
+      if (!name) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Topic name is required" }));
+        return;
+      }
+
+      const topic = await studentService.createTopic(
+        subjectId,
+        studentId,
+        name,
+        description || null
+      );
+
+      res.writeHead(201, { "Content-Type": "application/json" });
+      res.end(
+        JSON.stringify({
+          message: "Topic created successfully",
+          topic,
+        })
+      );
+    } catch (err) {
+      res.writeHead(400, { "Content-Type": "application/json" });
+      res.end(JSON.stringify({ error: err.message }));
+    }
+  }
+
+  /**
+   * Get topics for a subject
+   * GET /api/student/subjects/:subjectId/topics
+   */
+  async getTopics(req, res) {
+    try {
+      const studentId = req.user.id;
+      const pathname = req.url.split("?")[0];
+      const subjectId = parseInt(pathname.split("/")[4]);
+
+      if (!subjectId || isNaN(subjectId)) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Invalid subject ID" }));
+        return;
+      }
+
+      const topics = await studentService.getTopics(subjectId, studentId);
+
+      res.writeHead(200, { "Content-Type": "application/json" });
+      res.end(
+        JSON.stringify({
+          message: "Topics retrieved successfully",
+          topics,
+        })
+      );
+    } catch (err) {
+      res.writeHead(400, { "Content-Type": "application/json" });
+      res.end(JSON.stringify({ error: err.message }));
+    }
+  }
+
+  /**
+   * Delete a topic
+   * DELETE /api/student/subjects/:subjectId/topics/:topicId
+   */
+  async deleteTopic(req, res) {
+    try {
+      const studentId = req.user.id;
+      const pathname = req.url.split("?")[0];
+      const parts = pathname.split("/");
+      const subjectId = parseInt(parts[4]);
+      const topicId = parseInt(parts[6]);
+
+      if (!subjectId || isNaN(subjectId) || !topicId || isNaN(topicId)) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Invalid subject or topic ID" }));
+        return;
+      }
+
+      const result = await studentService.deleteTopic(
+        topicId,
+        subjectId,
+        studentId
+      );
+
+      res.writeHead(200, { "Content-Type": "application/json" });
+      res.end(JSON.stringify(result));
+    } catch (err) {
+      res.writeHead(400, { "Content-Type": "application/json" });
+      res.end(JSON.stringify({ error: err.message }));
+    }
+  }
+
+  /**
+   * Add a module note (PDF file)
+   * POST /api/student/subjects/:subjectId/topics/:topicId/notes/create
+   */
+  async addModuleNote(req, res) {
+    try {
+      const data = await parseRequestBody(req);
+      const { title, file_name, file_url, google_drive_file_id } = data;
+      const studentId = req.user.id;
+      const pathname = req.url.split("?")[0];
+      const parts = pathname.split("/");
+      const subjectId = parseInt(parts[4]);
+      const topicId = parseInt(parts[6]);
+
+      if (!subjectId || isNaN(subjectId) || !topicId || isNaN(topicId)) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Invalid subject or topic ID" }));
+        return;
+      }
+
+      if (!title || !file_name) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Title and file name are required" }));
+        return;
+      }
+
+      const note = await studentService.addModuleNote(
+        topicId,
+        subjectId,
+        studentId,
+        title,
+        file_name,
+        file_url || null,
+        google_drive_file_id || null
+      );
+
+      res.writeHead(201, { "Content-Type": "application/json" });
+      res.end(
+        JSON.stringify({
+          message: "Module note added successfully",
+          note,
+        })
+      );
+    } catch (err) {
+      res.writeHead(400, { "Content-Type": "application/json" });
+      res.end(JSON.stringify({ error: err.message }));
+    }
+  }
+
+  /**
+   * Get module notes for a topic
+   * GET /api/student/subjects/:subjectId/topics/:topicId/notes
+   */
+  async getModuleNotes(req, res) {
+    try {
+      const studentId = req.user.id;
+      const pathname = req.url.split("?")[0];
+      const parts = pathname.split("/");
+      const subjectId = parseInt(parts[4]);
+      const topicId = parseInt(parts[6]);
+
+      if (!subjectId || isNaN(subjectId) || !topicId || isNaN(topicId)) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Invalid subject or topic ID" }));
+        return;
+      }
+
+      const notes = await studentService.getModuleNotes(
+        topicId,
+        subjectId,
+        studentId
+      );
+
+      res.writeHead(200, { "Content-Type": "application/json" });
+      res.end(
+        JSON.stringify({
+          message: "Module notes retrieved successfully",
+          notes,
+        })
+      );
+    } catch (err) {
+      res.writeHead(400, { "Content-Type": "application/json" });
+      res.end(JSON.stringify({ error: err.message }));
+    }
+  }
+
+  /**
+   * Delete a module note
+   * DELETE /api/student/subjects/:subjectId/topics/:topicId/notes/:noteId
+   */
+  async deleteModuleNote(req, res) {
+    try {
+      const studentId = req.user.id;
+      const pathname = req.url.split("?")[0];
+      const parts = pathname.split("/");
+      const subjectId = parseInt(parts[4]);
+      const topicId = parseInt(parts[6]);
+      const noteId = parseInt(parts[8]);
+
+      if (
+        !subjectId ||
+        isNaN(subjectId) ||
+        !topicId ||
+        isNaN(topicId) ||
+        !noteId ||
+        isNaN(noteId)
+      ) {
+        res.writeHead(400, { "Content-Type": "application/json" });
+        res.end(JSON.stringify({ error: "Invalid IDs" }));
+        return;
+      }
+
+      const result = await studentService.deleteModuleNote(
+        noteId,
+        topicId,
+        subjectId,
+        studentId
+      );
+
+      res.writeHead(200, { "Content-Type": "application/json" });
+      res.end(JSON.stringify(result));
+    } catch (err) {
+      res.writeHead(400, { "Content-Type": "application/json" });
+      res.end(JSON.stringify({ error: err.message }));
+    }
+  }
+}
+
+module.exports = new StudentController();
diff --git a/backend/db/db-init.js b/backend/db/db-init.js
index 00cf5c0..98f2cd4 100644
--- a/backend/db/db-init.js
+++ b/backend/db/db-init.js
@@ -50,6 +50,57 @@ async function initializeDatabase() {
       CREATE INDEX IF NOT EXISTS idx_parent_student_links_status ON parent_student_links(status);
     `);
 
+    // Subjects table
+    await db.query(`
+      CREATE TABLE IF NOT EXISTS module_subjects (
+        id SERIAL PRIMARY KEY,
+        student_id INT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
+        name VARCHAR(100) NOT NULL,
+        description TEXT,
+        created_at TIMESTAMP DEFAULT NOW(),
+        updated_at TIMESTAMP DEFAULT NOW()
+      );
+    `);
+
+    // Topics table (sub-categories within subjects)
+    await db.query(`
+      CREATE TABLE IF NOT EXISTS module_topics (
+        id SERIAL PRIMARY KEY,
+        subject_id INT NOT NULL REFERENCES module_subjects(id) ON DELETE CASCADE,
+        name VARCHAR(100) NOT NULL,
+        description TEXT,
+        created_at TIMESTAMP DEFAULT NOW(),
+        updated_at TIMESTAMP DEFAULT NOW()
+      );
+    `);
+
+    // Module Notes table (PDF files from Google Drive)
+    await db.query(`
+      CREATE TABLE IF NOT EXISTS module_notes (
+        id SERIAL PRIMARY KEY,
+        topic_id INT NOT NULL REFERENCES module_topics(id) ON DELETE CASCADE,
+        title VARCHAR(150) NOT NULL,
+        file_name VARCHAR(255) NOT NULL,
+        file_url VARCHAR(500),
+        google_drive_file_id VARCHAR(255),
+        created_at TIMESTAMP DEFAULT NOW(),
+        updated_at TIMESTAMP DEFAULT NOW()
+      );
+    `);
+
+    // Create indexes for better performance
+    await db.query(`
+      CREATE INDEX IF NOT EXISTS idx_module_subjects_student_id ON module_subjects(student_id);
+    `);
+
+    await db.query(`
+      CREATE INDEX IF NOT EXISTS idx_module_topics_subject_id ON module_topics(subject_id);
+    `);
+
+    await db.query(`
+      CREATE INDEX IF NOT EXISTS idx_module_notes_topic_id ON module_notes(topic_id);
+    `);
+
     console.log("✅ Database tables and indexes created successfully");
 
     // Check if admin user exists, if not create one
diff --git a/backend/routes/studentRoutes.js b/backend/routes/studentRoutes.js
new file mode 100644
index 0000000..7f4e596
--- /dev/null
+++ b/backend/routes/studentRoutes.js
@@ -0,0 +1,136 @@
+// routes/studentRoutes.js
+const studentController = require("../controllers/studentController");
+const {
+  verifyToken,
+  requireRole,
+  applyMiddleware,
+} = require("../middleware/authMiddleware");
+
+function handleStudentRoutes(req, res) {
+  const pathname = req.url.split("?")[0]; // Remove query params
+  const method = req.method;
+
+  try {
+    // Subject management routes
+    // Create subject: POST /api/student/subjects/create
+    if (method === "POST" && pathname === "/api/student/subjects/create") {
+      return applyMiddleware(
+        [verifyToken, requireRole("student")],
+        studentController.createSubject
+      )(req, res);
+    }
+
+    // Get all subjects: GET /api/student/subjects
+    if (method === "GET" && pathname === "/api/student/subjects") {
+      return applyMiddleware(
+        [verifyToken, requireRole("student")],
+        studentController.getSubjects
+      )(req, res);
+    }
+
+    // Get specific subject: GET /api/student/subjects/:subjectId
+    if (method === "GET" && pathname.match(/^\/api\/student\/subjects\/\d+$/)) {
+      return applyMiddleware(
+        [verifyToken, requireRole("student")],
+        studentController.getSubject
+      )(req, res);
+    }
+
+    // Update subject: PUT /api/student/subjects/:subjectId
+    if (method === "PUT" && pathname.match(/^\/api\/student\/subjects\/\d+$/)) {
+      return applyMiddleware(
+        [verifyToken, requireRole("student")],
+        studentController.updateSubject
+      )(req, res);
+    }
+
+    // Delete subject: DELETE /api/student/subjects/:subjectId
+    if (
+      method === "DELETE" &&
+      pathname.match(/^\/api\/student\/subjects\/\d+$/)
+    ) {
+      return applyMiddleware(
+        [verifyToken, requireRole("student")],
+        studentController.deleteSubject
+      )(req, res);
+    }
+
+    // Topic management routes
+    // Create topic: POST /api/student/subjects/:subjectId/topics/create
+    if (
+      method === "POST" &&
+      pathname.match(/^\/api\/student\/subjects\/\d+\/topics\/create$/)
+    ) {
+      return applyMiddleware(
+        [verifyToken, requireRole("student")],
+        studentController.createTopic
+      )(req, res);
+    }
+
+    // Get topics: GET /api/student/subjects/:subjectId/topics
+    if (
+      method === "GET" &&
+      pathname.match(/^\/api\/student\/subjects\/\d+\/topics$/)
+    ) {
+      return applyMiddleware(
+        [verifyToken, requireRole("student")],
+        studentController.getTopics
+      )(req, res);
+    }
+
+    // Delete topic: DELETE /api/student/subjects/:subjectId/topics/:topicId
+    if (
+      method === "DELETE" &&
+      pathname.match(/^\/api\/student\/subjects\/\d+\/topics\/\d+$/)
+    ) {
+      return applyMiddleware(
+        [verifyToken, requireRole("student")],
+        studentController.deleteTopic
+      )(req, res);
+    }
+
+    // Module notes routes
+    // Add module note: POST /api/student/subjects/:subjectId/topics/:topicId/notes/create
+    if (
+      method === "POST" &&
+      pathname.match(
+        /^\/api\/student\/subjects\/\d+\/topics\/\d+\/notes\/create$/
+      )
+    ) {
+      return applyMiddleware(
+        [verifyToken, requireRole("student")],
+        studentController.addModuleNote
+      )(req, res);
+    }
+
+    // Get module notes: GET /api/student/subjects/:subjectId/topics/:topicId/notes
+    if (
+      method === "GET" &&
+      pathname.match(/^\/api\/student\/subjects\/\d+\/topics\/\d+\/notes$/)
+    ) {
+      return applyMiddleware(
+        [verifyToken, requireRole("student")],
+        studentController.getModuleNotes
+      )(req, res);
+    }
+
+    // Delete module note: DELETE /api/student/subjects/:subjectId/topics/:topicId/notes/:noteId
+    if (
+      method === "DELETE" &&
+      pathname.match(/^\/api\/student\/subjects\/\d+\/topics\/\d+\/notes\/\d+$/)
+    ) {
+      return applyMiddleware(
+        [verifyToken, requireRole("student")],
+        studentController.deleteModuleNote
+      )(req, res);
+    }
+
+    // Route not found in student routes
+    return null; // Return null to indicate route not handled
+  } catch (err) {
+    res.writeHead(500, { "Content-Type": "application/json" });
+    res.end(JSON.stringify({ error: "Internal server error" }));
+  }
+}
+
+module.exports = handleStudentRoutes;
diff --git a/backend/server.js b/backend/server.js
index 6352b57..91b91d2 100644
--- a/backend/server.js
+++ b/backend/server.js
@@ -4,6 +4,7 @@ const url = require("url");
 const fs = require("fs");
 const path = require("path");
 const handleAuthRoutes = require("./routes/authRoutes");
+const handleStudentRoutes = require("./routes/studentRoutes");
 
 // Frontend path
 const frontendPath = path.join(__dirname, "../frontend");
@@ -43,6 +44,13 @@ const server = http.createServer((req, res) => {
 
   // API routes
   if (pathname.startsWith("/api/")) {
+    // Try student routes first
+    const studentResult = handleStudentRoutes(req, res);
+    if (studentResult !== null) {
+      return studentResult;
+    }
+
+    // Fall back to auth routes
     return handleAuthRoutes(req, res);
   }
 
diff --git a/backend/services/studentService.js b/backend/services/studentService.js
new file mode 100644
index 0000000..bb2841b
--- /dev/null
+++ b/backend/services/studentService.js
@@ -0,0 +1,364 @@
+// services/studentService.js
+const db = require("../db/db");
+
+class StudentService {
+  /**
+   * Create a new subject for a student
+   */
+  async createSubject(studentId, subjectName, description = null) {
+    if (!studentId || !subjectName) {
+      throw new Error("Student ID and subject name are required");
+    }
+
+    // Validate student exists and is a student
+    const studentCheck = await db.query(
+      "SELECT * FROM users WHERE id = $1 AND role = 'student'",
+      [studentId]
+    );
+
+    if (studentCheck.rows.length === 0) {
+      throw new Error("Student not found");
+    }
+
+    // Check if subject already exists for this student
+    const existingSubject = await db.query(
+      "SELECT * FROM module_subjects WHERE student_id = $1 AND name = $2",
+      [studentId, subjectName]
+    );
+
+    if (existingSubject.rows.length > 0) {
+      throw new Error("Subject already exists with this name");
+    }
+
+    // Create the subject
+    const result = await db.query(
+      `INSERT INTO module_subjects (student_id, name, description)
+       VALUES ($1, $2, $3)
+       RETURNING id, student_id, name, description, created_at, updated_at`,
+      [studentId, subjectName, description]
+    );
+
+    return result.rows[0];
+  }
+
+  /**
+   * Get all subjects for a student
+   */
+  async getStudentSubjects(studentId) {
+    if (!studentId) {
+      throw new Error("Student ID is required");
+    }
+
+    const result = await db.query(
+      `SELECT id, name, description, created_at, updated_at
+       FROM module_subjects
+       WHERE student_id = $1
+       ORDER BY created_at DESC`,
+      [studentId]
+    );
+
+    return result.rows;
+  }
+
+  /**
+   * Get a specific subject with its topics
+   */
+  async getSubjectWithTopics(subjectId, studentId) {
+    if (!subjectId || !studentId) {
+      throw new Error("Subject ID and Student ID are required");
+    }
+
+    // Verify the subject belongs to the student
+    const subjectCheck = await db.query(
+      "SELECT * FROM module_subjects WHERE id = $1 AND student_id = $2",
+      [subjectId, studentId]
+    );
+
+    if (subjectCheck.rows.length === 0) {
+      throw new Error("Subject not found");
+    }
+
+    const subject = subjectCheck.rows[0];
+
+    // Get topics for this subject
+    const topicsResult = await db.query(
+      `SELECT id, name, description, created_at, updated_at
+       FROM module_topics
+       WHERE subject_id = $1
+       ORDER BY created_at DESC`,
+      [subjectId]
+    );
+
+    subject.topics = topicsResult.rows;
+    return subject;
+  }
+
+  /**
+   * Update a subject
+   */
+  async updateSubject(subjectId, studentId, updates) {
+    if (!subjectId || !studentId) {
+      throw new Error("Subject ID and Student ID are required");
+    }
+
+    // Verify the subject belongs to the student
+    const subjectCheck = await db.query(
+      "SELECT * FROM module_subjects WHERE id = $1 AND student_id = $2",
+      [subjectId, studentId]
+    );
+
+    if (subjectCheck.rows.length === 0) {
+      throw new Error("Subject not found");
+    }
+
+    const { name, description } = updates;
+    const updateFields = [];
+    const updateValues = [];
+    let paramCount = 1;
+
+    if (name !== undefined) {
+      updateFields.push(`name = $${paramCount}`);
+      updateValues.push(name);
+      paramCount++;
+    }
+
+    if (description !== undefined) {
+      updateFields.push(`description = $${paramCount}`);
+      updateValues.push(description);
+      paramCount++;
+    }
+
+    updateFields.push(`updated_at = NOW()`);
+
+    if (updateFields.length === 1) {
+      throw new Error("No valid fields to update");
+    }
+
+    updateValues.push(subjectId);
+
+    const result = await db.query(
+      `UPDATE module_subjects
+       SET ${updateFields.join(", ")}
+       WHERE id = $${paramCount}
+       RETURNING id, student_id, name, description, created_at, updated_at`,
+      updateValues
+    );
+
+    return result.rows[0];
+  }
+
+  /**
+   * Delete a subject
+   */
+  async deleteSubject(subjectId, studentId) {
+    if (!subjectId || !studentId) {
+      throw new Error("Subject ID and Student ID are required");
+    }
+
+    // Verify the subject belongs to the student
+    const subjectCheck = await db.query(
+      "SELECT * FROM module_subjects WHERE id = $1 AND student_id = $2",
+      [subjectId, studentId]
+    );
+
+    if (subjectCheck.rows.length === 0) {
+      throw new Error("Subject not found");
+    }
+
+    // Delete will cascade to topics and module_notes
+    await db.query("DELETE FROM module_subjects WHERE id = $1", [subjectId]);
+
+    return { message: "Subject deleted successfully" };
+  }
+
+  /**
+   * Create a topic within a subject
+   */
+  async createTopic(subjectId, studentId, topicName, description = null) {
+    if (!subjectId || !studentId || !topicName) {
+      throw new Error("Subject ID, Student ID, and topic name are required");
+    }
+
+    // Verify the subject belongs to the student
+    const subjectCheck = await db.query(
+      "SELECT * FROM module_subjects WHERE id = $1 AND student_id = $2",
+      [subjectId, studentId]
+    );
+
+    if (subjectCheck.rows.length === 0) {
+      throw new Error("Subject not found");
+    }
+
+    // Check if topic already exists
+    const existingTopic = await db.query(
+      "SELECT * FROM module_topics WHERE subject_id = $1 AND name = $2",
+      [subjectId, topicName]
+    );
+
+    if (existingTopic.rows.length > 0) {
+      throw new Error("Topic already exists with this name");
+    }
+
+    const result = await db.query(
+      `INSERT INTO module_topics (subject_id, name, description)
+       VALUES ($1, $2, $3)
+       RETURNING id, subject_id, name, description, created_at, updated_at`,
+      [subjectId, topicName, description]
+    );
+
+    return result.rows[0];
+  }
+
+  /**
+   * Get topics for a subject
+   */
+  async getTopics(subjectId, studentId) {
+    if (!subjectId || !studentId) {
+      throw new Error("Subject ID and Student ID are required");
+    }
+
+    // Verify the subject belongs to the student
+    const subjectCheck = await db.query(
+      "SELECT * FROM module_subjects WHERE id = $1 AND student_id = $2",
+      [subjectId, studentId]
+    );
+
+    if (subjectCheck.rows.length === 0) {
+      throw new Error("Subject not found");
+    }
+
+    const result = await db.query(
+      `SELECT id, name, description, created_at, updated_at
+       FROM module_topics
+       WHERE subject_id = $1
+       ORDER BY created_at DESC`,
+      [subjectId]
+    );
+
+    return result.rows;
+  }
+
+  /**
+   * Delete a topic
+   */
+  async deleteTopic(topicId, subjectId, studentId) {
+    if (!topicId || !subjectId || !studentId) {
+      throw new Error("Topic ID, Subject ID, and Student ID are required");
+    }
+
+    // Verify the topic belongs to the subject and student
+    const topicCheck = await db.query(
+      `SELECT t.* FROM module_topics t
+       JOIN module_subjects s ON t.subject_id = s.id
+       WHERE t.id = $1 AND t.subject_id = $2 AND s.student_id = $3`,
+      [topicId, subjectId, studentId]
+    );
+
+    if (topicCheck.rows.length === 0) {
+      throw new Error("Topic not found");
+    }
+
+    await db.query("DELETE FROM module_topics WHERE id = $1", [topicId]);
+
+    return { message: "Topic deleted successfully" };
+  }
+
+  /**
+   * Add a module note (PDF file)
+   */
+  async addModuleNote(
+    topicId,
+    subjectId,
+    studentId,
+    title,
+    fileName,
+    fileUrl = null,
+    googleDriveFileId = null
+  ) {
+    if (!topicId || !subjectId || !studentId || !title || !fileName) {
+      throw new Error(
+        "Topic ID, Subject ID, Student ID, title, and file name are required"
+      );
+    }
+
+    // Verify the topic belongs to the subject and student
+    const topicCheck = await db.query(
+      `SELECT t.* FROM module_topics t
+       JOIN module_subjects s ON t.subject_id = s.id
+       WHERE t.id = $1 AND t.subject_id = $2 AND s.student_id = $3`,
+      [topicId, subjectId, studentId]
+    );
+
+    if (topicCheck.rows.length === 0) {
+      throw new Error("Topic not found");
+    }
+
+    const result = await db.query(
+      `INSERT INTO module_notes (topic_id, title, file_name, file_url, google_drive_file_id)
+       VALUES ($1, $2, $3, $4, $5)
+       RETURNING id, topic_id, title, file_name, file_url, google_drive_file_id, created_at, updated_at`,
+      [topicId, title, fileName, fileUrl, googleDriveFileId]
+    );
+
+    return result.rows[0];
+  }
+
+  /**
+   * Get module notes for a topic
+   */
+  async getModuleNotes(topicId, subjectId, studentId) {
+    if (!topicId || !subjectId || !studentId) {
+      throw new Error("Topic ID, Subject ID, and Student ID are required");
+    }
+
+    // Verify access
+    const topicCheck = await db.query(
+      `SELECT t.* FROM module_topics t
+       JOIN module_subjects s ON t.subject_id = s.id
+       WHERE t.id = $1 AND t.subject_id = $2 AND s.student_id = $3`,
+      [topicId, subjectId, studentId]
+    );
+
+    if (topicCheck.rows.length === 0) {
+      throw new Error("Topic not found");
+    }
+
+    const result = await db.query(
+      `SELECT id, title, file_name, file_url, google_drive_file_id, created_at, updated_at
+       FROM module_notes
+       WHERE topic_id = $1
+       ORDER BY created_at DESC`,
+      [topicId]
+    );
+
+    return result.rows;
+  }
+
+  /**
+   * Delete a module note
+   */
+  async deleteModuleNote(noteId, topicId, subjectId, studentId) {
+    if (!noteId || !topicId || !subjectId || !studentId) {
+      throw new Error("All IDs are required");
+    }
+
+    // Verify access
+    const noteCheck = await db.query(
+      `SELECT mn.* FROM module_notes mn
+       JOIN module_topics t ON mn.topic_id = t.id
+       JOIN module_subjects s ON t.subject_id = s.id
+       WHERE mn.id = $1 AND mn.topic_id = $2 AND t.subject_id = $3 AND s.student_id = $4`,
+      [noteId, topicId, subjectId, studentId]
+    );
+
+    if (noteCheck.rows.length === 0) {
+      throw new Error("Module note not found");
+    }
+
+    await db.query("DELETE FROM module_notes WHERE id = $1", [noteId]);
+
+    return { message: "Module note deleted successfully" };
+  }
+}
+
+module.exports = new StudentService();
diff --git a/frontend/config/googleDrive.config.js b/frontend/config/googleDrive.config.js
new file mode 100644
index 0000000..3f08867
--- /dev/null
+++ b/frontend/config/googleDrive.config.js
@@ -0,0 +1,27 @@
+/**
+ * Google Drive API Configuration
+ * Store your API credentials here
+ * Get these from: https://console.cloud.google.com/
+ */
+
+const GOOGLE_DRIVE_CONFIG = {
+  // Google Cloud Project Client ID
+  CLIENT_ID:
+    "532045151451-09l98b9guf3olt8i1mfnlaa50e251oj5.apps.googleusercontent.com",
+
+  // Google Drive API Key
+  API_KEY: "AIzaSyCEJUomFCZex4ubN9_sBDDXstiHNBadxME",
+
+  // OAuth 2.0 Scopes
+  SCOPES: ["https://www.googleapis.com/auth/drive.file"],
+
+  // Discovery Document URL for Google Drive API
+  DISCOVERY_DOCS: [
+    "https://www.googleapis.com/discovery/v1/apis/drive/v3/rest",
+  ],
+};
+
+// Export for use in other modules
+if (typeof module !== "undefined" && module.exports) {
+  module.exports = GOOGLE_DRIVE_CONFIG;
+}
diff --git a/frontend/css/dashboard/modulespace.css b/frontend/css/dashboard/modulespace.css
new file mode 100644
index 0000000..5970f60
--- /dev/null
+++ b/frontend/css/dashboard/modulespace.css
@@ -0,0 +1,26 @@
+/* Responsive Design */
+@media (max-width: 768px) {
+  .subjects-grid {
+    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
+    gap: 15px;
+  }
+
+  .subject-card {
+    min-height: 120px;
+    padding: 20px;
+  }
+
+  .subject-card .subject-header {
+    font-size: 14px;
+  }
+
+  .subject-card .subject-header i {
+    font-size: 28px;
+  }
+}
+
+@media (max-width: 480px) {
+  .subjects-grid {
+    grid-template-columns: 1fr 1fr;
+  }
+}
diff --git a/frontend/css/dashboard/quiz.css b/frontend/css/dashboard/quiz.css
index 1878d32..af1836a 100644
--- a/frontend/css/dashboard/quiz.css
+++ b/frontend/css/dashboard/quiz.css
@@ -9,7 +9,7 @@
 
 /* Card style */
 .subject-card {
-  position: static;
+  position: relative;
   background: rgba(255, 255, 255, 0.05);
   border-radius: var(--border-radius);
   border: 2px solid rgba(255, 255, 255, 0.3);
diff --git a/frontend/css/dashboard/subject.css b/frontend/css/dashboard/subject.css
new file mode 100644
index 0000000..8e532dd
--- /dev/null
+++ b/frontend/css/dashboard/subject.css
@@ -0,0 +1,251 @@
+/* Subject Page Styles */
+
+/* Drag and drop section - removed as upload is now in modal */
+
+/* Upload area */
+.upload-area {
+  border: 2px dashed rgba(255, 255, 255, 0.3);
+  border-radius: 12px;
+  padding: 30px;
+  text-align: center;
+  cursor: pointer;
+  transition: all 0.3s ease;
+  background: rgba(255, 255, 255, 0.02);
+  margin-bottom: 20px;
+  position: relative;
+}
+
+.upload-area:hover {
+  border-color: rgba(255, 255, 255, 0.5);
+  background: rgba(255, 255, 255, 0.05);
+}
+
+.upload-area.dragover {
+  border-color: var(--color-primary);
+  background: rgba(33, 150, 243, 0.1);
+  transform: scale(1.01);
+}
+
+.upload-area i {
+  font-size: 40px;
+  color: var(--color-primary);
+  margin-bottom: 12px;
+  display: block;
+}
+
+.upload-area p {
+  margin: 6px 0;
+  color: #ccc;
+  font-size: 14px;
+}
+
+/* Upload loading indicator */
+.upload-loading {
+  position: absolute;
+  top: 0;
+  left: 0;
+  right: 0;
+  bottom: 0;
+  background: rgba(0, 0, 0, 0.8);
+  display: flex;
+  flex-direction: column;
+  align-items: center;
+  justify-content: center;
+  border-radius: 12px;
+  z-index: 10;
+}
+
+.upload-loading p {
+  margin: 10px 0 0 0;
+  color: #fff;
+  font-size: 14px;
+}
+
+/* Inside modal - make upload area smaller */
+#topic-menu-modal .upload-area {
+  padding: 20px;
+  margin-bottom: 15px;
+}
+
+#topic-menu-modal .upload-area i {
+  font-size: 32px;
+  margin-bottom: 10px;
+}
+
+/* Make topic menu modal larger */
+#topic-menu-modal .modal-content {
+  width: 90%;
+  max-width: none;
+  max-height: 80vh;
+  overflow-y: auto;
+}
+
+#topic-menu-modal .upload-area p {
+  margin: 4px 0;
+  font-size: 13px;
+}
+
+/* Files list */
+.files-list {
+  margin-top: 20px;
+}
+
+.file-item {
+  display: flex;
+  justify-content: space-between;
+  align-items: center;
+  padding: 12px 16px;
+  background: rgba(255, 255, 255, 0.05);
+  border: 1px solid rgba(255, 255, 255, 0.1);
+  border-radius: 8px;
+  margin-bottom: 12px;
+  transition: all 0.3s ease;
+}
+
+.file-item:hover {
+  background: rgba(255, 255, 255, 0.08);
+  border-color: rgba(255, 255, 255, 0.2);
+}
+
+.file-info {
+  display: flex;
+  align-items: center;
+  gap: 12px;
+  flex: 1;
+}
+
+.file-info i {
+  font-size: 24px;
+  color: #ff6b6b;
+}
+
+.file-name {
+  margin: 0;
+  font-weight: 600;
+  color: #fff;
+  overflow: hidden;
+  text-overflow: ellipsis;
+  white-space: nowrap;
+  max-width: 500px;
+}
+
+.file-size {
+  margin: 4px 0 0 0;
+  font-size: 12px;
+  color: #999;
+}
+
+.file-actions {
+  display: flex;
+  gap: 8px;
+}
+
+.btn-icon {
+  width: 36px;
+  height: 36px;
+  border-radius: 6px;
+  border: none;
+  background: rgba(255, 255, 255, 0.1);
+  color: #fff;
+  cursor: pointer;
+  display: flex;
+  align-items: center;
+  justify-content: center;
+  transition: all 0.2s ease;
+  font-size: 14px;
+}
+
+.btn-icon:hover {
+  background: rgba(255, 255, 255, 0.2);
+}
+
+.btn-icon.delete:hover {
+  background: #ff6b6b;
+  color: #fff;
+}
+
+/* Modal enhancements for file management */
+#topic-menu-modal .modal-content {
+  max-width: 600px;
+  max-height: 90vh;
+  overflow-y: auto;
+}
+
+#topic-menu-modal .upload-area {
+  margin-top: 15px;
+  margin-bottom: 20px;
+  border-width: 2px;
+}
+
+#topic-menu-modal .files-list {
+  max-height: 300px;
+  overflow-y: auto;
+  margin-bottom: 15px;
+}
+
+/* Loading animation */
+@keyframes spin {
+  from {
+    transform: rotate(0deg);
+  }
+  to {
+    transform: rotate(360deg);
+  }
+}
+
+.spinner {
+  border: 3px solid rgba(255, 255, 255, 0.1);
+  border-radius: 50%;
+  border-top: 3px solid var(--color-primary);
+  width: 24px;
+  height: 24px;
+  animation: spin 0.8s linear infinite;
+}
+
+/* Responsive design */
+@media (max-width: 768px) {
+  .upload-area {
+    padding: 20px;
+  }
+
+  .upload-area i {
+    font-size: 36px;
+  }
+
+  .file-info {
+    flex-direction: column;
+    align-items: flex-start;
+  }
+
+  .file-name {
+    max-width: 100%;
+  }
+
+  .file-actions {
+    width: 100%;
+    margin-top: 8px;
+  }
+
+  .btn-icon {
+    flex: 1;
+  }
+}
+
+@media (max-width: 480px) {
+  .drag-drop-section {
+    padding: 12px;
+  }
+
+  .upload-area {
+    padding: 16px;
+  }
+
+  .upload-area i {
+    font-size: 28px;
+  }
+
+  .file-item {
+    flex-direction: column;
+    align-items: flex-start;
+  }
+}
diff --git a/frontend/dashboards/student/modulespace/modulespace.html b/frontend/dashboards/student/modulespace/modulespace.html
new file mode 100644
index 0000000..063b117
--- /dev/null
+++ b/frontend/dashboards/student/modulespace/modulespace.html
@@ -0,0 +1,90 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>EduBloom - Module Space</title>
+    <script src="../../../js/sidebar.js"></script>
+    <script src="../../../config/googleDrive.config.js"></script>
+
+    <link rel="stylesheet" href="../../../css/style.css" />
+    <link rel="stylesheet" href="../../../css/topbar.css" />
+    <link rel="stylesheet" href="../../../css/sidebar.css" />
+    <link rel="stylesheet" href="../../../css/cards.css" />
+    <link rel="stylesheet" href="../../../css/dashboard/quiz.css" />
+    <link rel="stylesheet" href="../../../css/dashboard/clock.css" />
+    <link rel="stylesheet" href="../../../css/dashboard/modulespace.css" />
+    <link
+      rel="stylesheet"
+      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/7.0.0/css/all.min.css"
+      crossorigin="anonymous"
+      referrerpolicy="no-referrer"
+    />
+  </head>
+  <body>
+    <div class="bg-image"></div>
+
+    <!-- sidebar + content -->
+    <div class="container">
+      <div id="sidebar-container"></div>
+      <main id="content">
+        <div class="card welcome full">
+          <div class="welcome-content">
+            <h1 class="heading"><i class="fas fa-folder"></i> Module Space</h1>
+            <div>
+              "Organize your subjects. Create topics. Track your progress."
+            </div>
+          </div>
+          <div class="welcome-image"></div>
+        </div>
+
+        <div id="subjects-container" class="subjects-grid">
+          <!-- Cards rendered dynamically -->
+        </div>
+      </main>
+    </div>
+
+    <!-- Modal -->
+    <div id="subject-modal" class="modal">
+      <div class="modal-content">
+        <span class="close">&times;</span>
+        <h2 id="modal-title">Add Subject</h2>
+        <input
+          type="text"
+          id="subject-input"
+          placeholder="Enter subject name"
+          maxlength="50"
+        />
+        <button id="save-subject-btn" class="btn-primary">Save</button>
+      </div>
+    </div>
+
+    <!-- Create Topic Modal -->
+    <div id="topic-modal" class="modal">
+      <div class="modal-content">
+        <div class="modal-header">
+          <h2>Create New Topic</h2>
+          <span class="close">&times;</span>
+        </div>
+        <input
+          type="text"
+          id="topic-name"
+          placeholder="Enter topic name"
+          maxlength="50"
+        />
+        <div class="modal-actions">
+          <button id="cancel-topic" class="btn-secondary">Cancel</button>
+          <button id="save-topic" class="btn-primary">Create</button>
+        </div>
+      </div>
+    </div>
+
+    <script src="../../../js/topbar.js"></script>
+    <script src="../../../js/modulespace.js"></script>
+    <script src="../../../js/bg-manager.js"></script>
+
+    <!-- Google APIs -->
+    <script async defer src="https://apis.google.com/js/platform.js"></script>
+    <script async src="https://accounts.google.com/gsi/client"></script>
+  </body>
+</html>
diff --git a/frontend/dashboards/student/modulespace/subject.html b/frontend/dashboards/student/modulespace/subject.html
new file mode 100644
index 0000000..cbd5caf
--- /dev/null
+++ b/frontend/dashboards/student/modulespace/subject.html
@@ -0,0 +1,124 @@
+<!DOCTYPE html>
+<html lang="en">
+  <head>
+    <meta charset="UTF-8" />
+    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
+    <title>EduBloom - Subject</title>
+    <script src="../../../js/sidebar.js"></script>
+    <script src="../../../config/googleDrive.config.js"></script>
+
+    <link rel="stylesheet" href="../../../css/style.css" />
+    <link rel="stylesheet" href="../../../css/topbar.css" />
+    <link rel="stylesheet" href="../../../css/sidebar.css" />
+    <link rel="stylesheet" href="../../../css/cards.css" />
+    <link rel="stylesheet" href="../../../css/dashboard/quiz.css" />
+    <link rel="stylesheet" href="../../../css/dashboard/clock.css" />
+    <link rel="stylesheet" href="../../../css/dashboard/subject.css" />
+    <link
+      rel="stylesheet"
+      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/7.0.0/css/all.min.css"
+      crossorigin="anonymous"
+      referrerpolicy="no-referrer"
+    />
+  </head>
+  <body>
+    <div class="bg-image"></div>
+
+    <!-- sidebar + content -->
+    <div class="container">
+      <div id="sidebar-container"></div>
+      <main id="content">
+        <!-- Header with back button and subject name -->
+        <h2 class="header-row">
+          <div class="card-title">
+            <i
+              class="fas fa-chevron-left"
+              id="back-btn"
+              onclick="window.location.href = './modulespace.html';"
+            ></i>
+            <span id="subject-name">Subject</span>
+          </div>
+        </h2>
+
+        <!-- Topics container -->
+        <div id="topics-container" class="subjects-grid">
+          <!-- Topics will be rendered here -->
+        </div>
+      </main>
+    </div>
+
+    <!-- Create Topic Modal -->
+    <div id="topic-modal" class="modal">
+      <div class="modal-content">
+        <span class="close">&times;</span>
+        <h2 id="topic-modal-title">Add Topic</h2>
+        <input
+          type="text"
+          id="topic-name"
+          placeholder="Enter topic name"
+          maxlength="50"
+        />
+        <button id="save-topic" class="btn-primary">Save</button>
+      </div>
+    </div>
+
+    <!-- Topic Menu Modal (for viewing/managing topic files) -->
+    <div id="topic-menu-modal" class="modal">
+      <div class="modal-content">
+        <div class="modal-header">
+          <h2 id="topic-menu-title">
+            Topic: <span id="topic-menu-name"></span>
+          </h2>
+          <span class="close">&times;</span>
+        </div>
+
+        <!-- Drag and drop area for PDF files inside modal -->
+        <div id="drag-drop-area" class="upload-area">
+          <i class="fas fa-cloud-upload-alt"></i>
+          <p>Drag & drop PDF files here</p>
+          <p style="font-size: 0.9em; color: #999">or click to browse</p>
+          <input
+            type="file"
+            id="file-input"
+            accept=".pdf"
+            multiple
+            style="display: none"
+          />
+          <button
+            class="btn-secondary"
+            onclick="document.getElementById('file-input').click()"
+          >
+            Browse Files
+          </button>
+
+          <!-- Upload loading indicator -->
+          <div
+            id="upload-indicator"
+            class="upload-loading"
+            style="display: none"
+          >
+            <div class="spinner"></div>
+            <p>Uploading files...</p>
+          </div>
+        </div>
+
+        <!-- Files list -->
+        <div id="topic-files-list" class="files-list">
+          <!-- Files for this topic -->
+        </div>
+
+        <div class="modal-actions">
+          <button id="close-topic-menu" class="btn-primary">Close</button>
+        </div>
+      </div>
+    </div>
+
+    <script src="../../../js/topbar.js"></script>
+    <script src="../../../js/subject.js"></script>
+    <script src="../../../js/bg-manager.js"></script>
+
+    <!-- Google APIs -->
+    <script async defer src="https://apis.google.com/js/platform.js"></script>
+    <script async src="https://accounts.google.com/gsi/client"></script>
+  </body>
+</html>
diff --git a/frontend/data/sidebar.json b/frontend/data/sidebar.json
index 6a004d9..c84bd39 100644
--- a/frontend/data/sidebar.json
+++ b/frontend/data/sidebar.json
@@ -9,7 +9,7 @@
     {
       "title": "Module Space",
       "icon": "fas fa-cloud-arrow-up",
-      "link": "modulespace.html"
+      "link": "modulespace/modulespace.html"
     },
     {
       "title": "Quiz",
diff --git a/frontend/js/modulespace.js b/frontend/js/modulespace.js
new file mode 100644
index 0000000..a602983
--- /dev/null
+++ b/frontend/js/modulespace.js
@@ -0,0 +1,348 @@
+/**
+ * Module Space JavaScript
+ * Handles subject and topic management
+ */
+
+let currentSubjectId = null;
+const API_BASE_URL = "http://localhost:3000/api/student"; // Backend API base URL
+
+// Get authentication token from localStorage
+function getAuthToken() {
+  return localStorage.getItem("authToken");
+}
+
+// Initialize on page load
+document.addEventListener("DOMContentLoaded", function () {
+  setupEventListeners();
+  loadSubjects();
+});
+
+/**
+ * Setup event listeners for buttons
+ */
+function setupEventListeners() {
+  // Setup Create Subject Modal buttons
+  const saveSubjectBtn = document.getElementById("save-subject-btn");
+  const subjectModal = document.getElementById("subject-modal");
+  const subjectInput = document.getElementById("subject-input");
+  const modalTitle = document.getElementById("modal-title");
+  const closeBtn = subjectModal ? subjectModal.querySelector(".close") : null;
+
+  if (saveSubjectBtn) {
+    saveSubjectBtn.addEventListener("click", () =>
+      handleSaveSubject(subjectInput, modalTitle)
+    );
+  }
+
+  if (closeBtn) {
+    closeBtn.addEventListener("click", () =>
+      closeCreateSubjectModal(subjectModal)
+    );
+  }
+
+  // Close modal when clicking outside of it
+  if (subjectModal) {
+    window.addEventListener("click", function (event) {
+      if (event.target === subjectModal) {
+        closeCreateSubjectModal(subjectModal);
+      }
+    });
+  }
+}
+
+/**
+ * Load subjects from API and display them
+ */
+async function loadSubjects() {
+  try {
+    const authToken = getAuthToken();
+    if (!authToken) {
+      console.log("User not authenticated");
+      return;
+    }
+
+    const response = await fetch(`${API_BASE_URL}/subjects`, {
+      method: "GET",
+      headers: {
+        Authorization: `Bearer ${authToken}`,
+        "Content-Type": "application/json",
+      },
+    });
+
+    if (!response.ok) {
+      throw new Error("Failed to load subjects");
+    }
+
+    const result = await response.json();
+    const subjects = result.subjects || [];
+
+    displaySubjects(subjects);
+  } catch (error) {
+    console.error("Error loading subjects:", error);
+    showNotification("Failed to load subjects", "error");
+  }
+}
+
+/**
+ * Display subjects as cards
+ */
+function displaySubjects(subjects) {
+  const grid = document.getElementById("subjects-container");
+
+  if (!grid) return;
+
+  if (subjects.length === 0) {
+    grid.innerHTML = "";
+  } else {
+    grid.innerHTML = "";
+  }
+
+  subjects.forEach((subject) => {
+    const card = document.createElement("div");
+    card.classList.add("subject-card");
+    card.innerHTML = `
+      <div class="subject-header">
+        <i class="fas fa-folder"></i>
+        <span>${subject.name}</span>
+      </div>
+      <i class="fas fa-ellipsis-v dots"></i>
+      <div class="dropdown">
+        <ul>
+          <li class="open">Open Subject</li>
+          <li class="edit">Edit</li>
+          <li class="delete">Delete</li>
+        </ul>
+      </div>
+    `;
+    grid.appendChild(card);
+
+    const dots = card.querySelector(".dots");
+    const dropdown = card.querySelector(".dropdown");
+
+    // Toggle dropdown
+    dots.addEventListener("click", (e) => {
+      e.stopPropagation();
+      dropdown.style.display =
+        dropdown.style.display === "block" ? "none" : "block";
+    });
+
+    // Open subject
+    dropdown.querySelector(".open").addEventListener("click", () => {
+      window.location.href = `./subject.html?subjectId=${
+        subject.id
+      }&subjectName=${encodeURIComponent(subject.name)}`;
+      dropdown.style.display = "none";
+    });
+
+    // Edit subject
+    dropdown.querySelector(".edit").addEventListener("click", () => {
+      openEditSubjectModal(subject);
+      dropdown.style.display = "none";
+    });
+
+    // Delete subject
+    dropdown.querySelector(".delete").addEventListener("click", () => {
+      if (confirm(`Delete "${subject.name}" and all its topics?`)) {
+        deleteSubject(subject.id);
+      }
+      dropdown.style.display = "none";
+    });
+
+    // Navigate to subject (click anywhere except dropdown)
+    card.addEventListener("click", (e) => {
+      if (e.target.closest(".dots") || e.target.closest(".dropdown")) return;
+      window.location.href = `./subject.html?subjectId=${
+        subject.id
+      }&subjectName=${encodeURIComponent(subject.name)}`;
+    });
+  });
+
+  // Close dropdowns when clicking outside
+  document.addEventListener("click", () => {
+    document
+      .querySelectorAll(".dropdown")
+      .forEach((dd) => (dd.style.display = "none"));
+  });
+
+  // Always add the "Add Subject" card at the end
+  const addSubjectCard = document.createElement("div");
+  addSubjectCard.classList.add("subject-card", "add-card");
+  addSubjectCard.onclick = openCreateSubjectModal;
+  addSubjectCard.innerHTML = `
+    <i class="fas fa-plus"></i><span>Add Subject</span>
+  `;
+  grid.appendChild(addSubjectCard);
+}
+
+/**
+ * Open create subject modal
+ */
+function openCreateSubjectModal() {
+  const modal = document.getElementById("subject-modal");
+  const input = document.getElementById("subject-input");
+  const title = document.getElementById("modal-title");
+
+  title.textContent = "Add Subject";
+  input.value = "";
+  delete input.dataset.editId;
+
+  modal.classList.add("show");
+  modal.style.display = "flex";
+}
+
+/**
+ * Open edit subject modal
+ */
+function openEditSubjectModal(subject) {
+  const modal = document.getElementById("subject-modal");
+  const input = document.getElementById("subject-input");
+  const title = document.getElementById("modal-title");
+
+  title.textContent = "Edit Subject";
+  input.value = subject.name;
+  input.dataset.editId = subject.id;
+
+  modal.classList.add("show");
+  modal.style.display = "flex";
+}
+
+/**
+ * Close subject modal
+ */
+function closeCreateSubjectModal(modal) {
+  const input = document.getElementById("subject-input");
+
+  modal.classList.remove("show");
+  modal.style.display = "none";
+
+  input.value = "";
+  delete input.dataset.editId;
+}
+
+/**
+ * Save subject (create or edit)
+ */
+async function handleSaveSubject(input, title) {
+  const subjectName = input.value.trim();
+  const editId = input.dataset.editId;
+
+  if (!subjectName) {
+    showNotification("Please enter a subject name", "error");
+    return;
+  }
+
+  try {
+    const authToken = getAuthToken();
+    if (!authToken) {
+      showNotification("User not authenticated", "error");
+      return;
+    }
+
+    if (editId) {
+      // Edit subject
+      const response = await fetch(`${API_BASE_URL}/subjects/${editId}`, {
+        method: "PUT",
+        headers: {
+          Authorization: `Bearer ${authToken}`,
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify({ name: subjectName }),
+      });
+
+      if (!response.ok) {
+        throw new Error("Failed to update subject");
+      }
+
+      showNotification("Subject updated successfully!", "success");
+    } else {
+      // Create subject
+      const response = await fetch(`${API_BASE_URL}/subjects/create`, {
+        method: "POST",
+        headers: {
+          Authorization: `Bearer ${authToken}`,
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify({ name: subjectName }),
+      });
+
+      if (!response.ok) {
+        throw new Error("Failed to create subject");
+      }
+
+      showNotification("Subject created successfully!", "success");
+    }
+
+    const modal = document.getElementById("subject-modal");
+    closeCreateSubjectModal(modal);
+    loadSubjects();
+  } catch (error) {
+    console.error("Error saving subject:", error);
+    showNotification(error.message || "Failed to save subject", "error");
+  }
+}
+
+/**
+ * Delete subject
+ */
+async function deleteSubject(subjectId) {
+  try {
+    const authToken = getAuthToken();
+    if (!authToken) {
+      showNotification("User not authenticated", "error");
+      return;
+    }
+
+    const response = await fetch(`${API_BASE_URL}/subjects/${subjectId}`, {
+      method: "DELETE",
+      headers: {
+        Authorization: `Bearer ${authToken}`,
+      },
+    });
+
+    if (!response.ok) {
+      throw new Error("Failed to delete subject");
+    }
+
+    showNotification("Subject deleted successfully!", "success");
+    loadSubjects();
+  } catch (error) {
+    console.error("Error deleting subject:", error);
+    showNotification("Failed to delete subject", "error");
+  }
+}
+
+/**
+ * Show notification
+ */
+function showNotification(message, type = "info") {
+  const notification = document.createElement("div");
+  notification.className = `notification notification-${type}`;
+  notification.textContent = message;
+
+  let bgColor = "#2196F3";
+  if (type === "success") {
+    bgColor = "#4CAF50";
+  } else if (type === "error") {
+    bgColor = "#f44336";
+  }
+
+  notification.style.cssText = `
+    position: fixed;
+    top: 20px;
+    right: 20px;
+    padding: 12px 20px;
+    background-color: ${bgColor};
+    color: white;
+    border-radius: 4px;
+    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
+    z-index: 10000;
+    font-size: 14px;
+    animation: slideIn 0.3s ease-in-out;
+  `;
+
+  document.body.appendChild(notification);
+
+  setTimeout(() => {
+    notification.remove();
+  }, 3000);
+}
diff --git a/frontend/js/subject.js b/frontend/js/subject.js
new file mode 100644
index 0000000..b120581
--- /dev/null
+++ b/frontend/js/subject.js
@@ -0,0 +1,977 @@
+/**
+ * Subject Page JavaScript
+ * Handles topics and file uploads for a specific subject
+ */
+
+const API_BASE_URL = "http://localhost:3000/api/student";
+let currentSubjectId = null;
+let currentTopicId = null;
+let topics = [];
+
+// Google Drive variables
+let gapiInited = false;
+let gisInited = false;
+let tokenClient;
+let isGoogleDriveConnected = false;
+let currentAccessToken = null;
+
+// Get authentication token from localStorage
+function getAuthToken() {
+  return localStorage.getItem("authToken");
+}
+
+// Get Google Drive access token
+function getGoogleAccessToken() {
+  return currentAccessToken;
+}
+
+// Initialize on page load
+document.addEventListener("DOMContentLoaded", function () {
+  loadSubjectFromURL();
+  setupEventListeners();
+  loadTopics();
+  waitForGoogleAPIsAndInitialize();
+  checkStoredGoogleDriveConnection();
+});
+
+/**
+ * Load subject ID and name from URL parameters
+ */
+function loadSubjectFromURL() {
+  const params = new URLSearchParams(window.location.search);
+  currentSubjectId = params.get("subjectId");
+  const subjectName = params.get("subjectName");
+
+  if (!currentSubjectId) {
+    showNotification("Subject not found. Redirecting...", "error");
+    setTimeout(() => {
+      window.location.href = "./modulespace.html";
+    }, 2000);
+    return;
+  }
+
+  // Update page title
+  document.getElementById("subject-name").textContent =
+    subjectName || "Subject";
+  document.title = `EduBloom - ${subjectName || "Subject"}`;
+}
+
+/**
+ * Wait for Google APIs to load, then initialize
+ */
+function waitForGoogleAPIsAndInitialize() {
+  // Check if both gapi and google are available
+  if (
+    typeof gapi !== "undefined" &&
+    typeof google !== "undefined" &&
+    google.accounts
+  ) {
+    initializeGoogleAPI();
+  } else {
+    // Retry after a short delay
+    setTimeout(waitForGoogleAPIsAndInitialize, 500);
+  }
+}
+
+/**
+ * Initialize Google API and GIS
+ */
+function initializeGoogleAPI() {
+  // No need to initialize gapi for REST API usage
+  gapiInited = true;
+  gisInited = true;
+}
+
+/**
+ * Check for previously stored Google Drive connection
+ */
+function checkStoredGoogleDriveConnection() {
+  const wasConnected = localStorage.getItem("googleDriveConnected") === "true";
+  const storedToken = localStorage.getItem("googleDriveAccessToken");
+
+  if (wasConnected && storedToken) {
+    isGoogleDriveConnected = true;
+    currentAccessToken = storedToken;
+    updateModalDriveStatus();
+  }
+}
+
+/**
+ * Handle Google Drive connection
+ */
+function handleConnectGoogleDrive() {
+  // Check if Google APIs are ready
+  if (
+    typeof google === "undefined" ||
+    !google.accounts ||
+    !google.accounts.oauth2
+  ) {
+    showNotification(
+      "Google APIs are still loading. Please try again.",
+      "error"
+    );
+    console.error("Google OAuth2 not ready yet");
+    return;
+  }
+
+  try {
+    // Create token client for OAuth 2.0 flow
+    tokenClient = google.accounts.oauth2.initTokenClient({
+      client_id: GOOGLE_DRIVE_CONFIG.CLIENT_ID,
+      scope: GOOGLE_DRIVE_CONFIG.SCOPES.join(" "),
+      callback: handleTokenResponse,
+    });
+
+    // Request access token
+    tokenClient.requestAccessToken();
+  } catch (error) {
+    console.error("Error creating token client:", error);
+    showNotification(
+      "Failed to connect to Google Drive. Please try again.",
+      "error"
+    );
+  }
+}
+
+/**
+ * Handle token response from Google OAuth
+ */
+function handleTokenResponse(resp) {
+  if (resp.error !== undefined) {
+    console.error("Token request error:", resp);
+    showNotification("Failed to get access token. Please try again.", "error");
+    return;
+  }
+
+  currentAccessToken = resp.access_token;
+  console.log("Access token obtained successfully");
+  setGoogleDriveConnected(true);
+  showNotification("Google Drive connected successfully!", "success");
+}
+
+/**
+ * Set Google Drive connection status
+ */
+function setGoogleDriveConnected(connected) {
+  isGoogleDriveConnected = connected;
+
+  if (connected) {
+    // Store connection status and token
+    localStorage.setItem("googleDriveConnected", "true");
+    if (currentAccessToken) {
+      localStorage.setItem("googleDriveAccessToken", currentAccessToken);
+    }
+  } else {
+    // Clear stored connection
+    localStorage.removeItem("googleDriveConnected");
+    localStorage.removeItem("googleDriveAccessToken");
+    currentAccessToken = null;
+  }
+
+  updateModalDriveStatus();
+}
+
+/**
+ * Update Google Drive status in modal
+ */
+function updateModalDriveStatus() {
+  const dragDropArea = document.getElementById("drag-drop-area");
+  if (!dragDropArea) return;
+
+  // Remove existing status div if it exists
+  const existingStatusDiv = document.getElementById("modal-drive-status");
+  if (existingStatusDiv) {
+    existingStatusDiv.remove();
+  }
+
+  // Create new status div
+  const statusDiv = document.createElement("div");
+  statusDiv.id = "modal-drive-status";
+  statusDiv.className = "drive-status";
+  statusDiv.style.cssText =
+    "margin-bottom: 10px; display: flex; align-items: center;";
+
+  const icon = document.createElement("i");
+  icon.className = "fas fa-circle";
+  icon.id = "modal-drive-icon";
+
+  const text = document.createElement("span");
+  text.id = "modal-drive-text";
+  text.style.marginLeft = "8px";
+
+  const connectBtn = document.createElement("button");
+  connectBtn.id = "connect-drive-modal-btn";
+  connectBtn.className = "btn-secondary";
+  connectBtn.style.cssText = "margin-left: 10px;";
+  connectBtn.textContent = "Connect";
+  connectBtn.addEventListener("click", handleConnectGoogleDrive);
+
+  statusDiv.appendChild(icon);
+  statusDiv.appendChild(text);
+  statusDiv.appendChild(connectBtn);
+
+  // Insert before drag-drop-area
+  dragDropArea.parentNode.insertBefore(statusDiv, dragDropArea);
+
+  // Update the status
+  if (isGoogleDriveConnected) {
+    icon.style.color = "green";
+    text.textContent = "Google Drive: Connected";
+    connectBtn.style.display = "none";
+  } else {
+    icon.style.color = "red";
+    text.textContent = "Google Drive: Not Connected";
+    connectBtn.style.display = "inline-block";
+  }
+}
+
+/**
+ * Setup event listeners
+ */
+function setupEventListeners() {
+  const saveTopicBtn = document.getElementById("save-topic");
+  const cancelTopicBtn = document.getElementById("cancel-topic");
+  const topicModal = document.getElementById("topic-modal");
+  const topicModalCloseBtn = topicModal.querySelector(".close");
+
+  const dragDropArea = document.getElementById("drag-drop-area");
+  const fileInput = document.getElementById("file-input");
+  const saveTopicMenuBtn = document.getElementById("close-topic-menu");
+  const topicMenuModal = document.getElementById("topic-menu-modal");
+  const topicMenuCloseBtn = topicMenuModal.querySelector(".close");
+
+  // Save topic
+  if (saveTopicBtn) {
+    saveTopicBtn.addEventListener("click", handleSaveTopic);
+  }
+
+  // Topic modal close button
+  if (topicModalCloseBtn) {
+    topicModalCloseBtn.addEventListener("click", closeTopicModal);
+  }
+
+  // File drag and drop
+  if (dragDropArea) {
+    dragDropArea.addEventListener("dragover", handleDragOver);
+    dragDropArea.addEventListener("dragleave", handleDragLeave);
+    dragDropArea.addEventListener("drop", handleFileDrop);
+  }
+
+  // File input change
+  if (fileInput) {
+    fileInput.addEventListener("change", handleFileSelect);
+  }
+
+  // Topic menu close button
+  if (topicMenuCloseBtn) {
+    topicMenuCloseBtn.addEventListener("click", closeTopicMenuModal);
+  }
+
+  if (saveTopicMenuBtn) {
+    saveTopicMenuBtn.addEventListener("click", closeTopicMenuModal);
+  }
+
+  // Close modals when clicking outside
+  document.addEventListener("click", (e) => {
+    if (e.target === topicModal) {
+      closeTopicModal();
+    }
+    if (e.target === topicMenuModal) {
+      closeTopicMenuModal();
+    }
+  });
+}
+
+/**
+ * Load topics for current subject
+ */
+async function loadTopics() {
+  if (!currentSubjectId) return;
+
+  try {
+    const authToken = getAuthToken();
+    if (!authToken) {
+      showNotification("User not authenticated", "error");
+      return;
+    }
+
+    const response = await fetch(
+      `${API_BASE_URL}/subjects/${currentSubjectId}/topics`,
+      {
+        headers: {
+          Authorization: `Bearer ${authToken}`,
+        },
+      }
+    );
+
+    if (!response.ok) {
+      throw new Error("Failed to load topics");
+    }
+
+    const data = await response.json();
+    topics = data.topics || [];
+    displayTopics();
+  } catch (error) {
+    console.error("Error loading topics:", error);
+    showNotification("Failed to load topics", "error");
+  }
+}
+
+/**
+ * Display topics as cards
+ */
+function displayTopics() {
+  const container = document.getElementById("topics-container");
+  if (!container) return;
+
+  container.innerHTML = "";
+
+  topics.forEach((topic) => {
+    const card = document.createElement("div");
+    card.classList.add("subject-card");
+    card.innerHTML = `
+      <div class="subject-header">
+        <i class="fas fa-book"></i>
+        <span>${topic.name}</span>
+      </div>
+      <i class="fas fa-ellipsis-v dots"></i>
+      <div class="dropdown">
+        <ul>
+          <li class="view-files">View Files</li>
+          <li class="edit">Edit</li>
+          <li class="delete">Delete</li>
+        </ul>
+      </div>
+    `;
+    container.appendChild(card);
+
+    const dots = card.querySelector(".dots");
+    const dropdown = card.querySelector(".dropdown");
+
+    // Toggle dropdown
+    dots.addEventListener("click", (e) => {
+      e.stopPropagation();
+      dropdown.style.display =
+        dropdown.style.display === "block" ? "none" : "block";
+    });
+
+    // View files
+    dropdown.querySelector(".view-files").addEventListener("click", () => {
+      openTopicMenuModal(topic);
+      dropdown.style.display = "none";
+    });
+
+    // Edit topic
+    dropdown.querySelector(".edit").addEventListener("click", () => {
+      openEditTopicModal(topic);
+      dropdown.style.display = "none";
+    });
+
+    // Delete topic
+    dropdown.querySelector(".delete").addEventListener("click", () => {
+      if (confirm(`Delete "${topic.name}" and all its files?`)) {
+        deleteTopic(topic.id);
+      }
+      dropdown.style.display = "none";
+    });
+
+    // Navigate to topic (click anywhere except dropdown)
+    card.addEventListener("click", (e) => {
+      if (e.target.closest(".dots") || e.target.closest(".dropdown")) return;
+      openTopicMenuModal(topic);
+    });
+  });
+
+  // Close dropdowns when clicking outside
+  document.addEventListener("click", () => {
+    document
+      .querySelectorAll(".dropdown")
+      .forEach((dd) => (dd.style.display = "none"));
+  });
+
+  // Always add "Add Topic" card at the end
+  const addCard = document.createElement("div");
+  addCard.classList.add("subject-card", "add-card");
+  addCard.innerHTML = `<i class="fas fa-plus"></i><span>Add Topic</span>`;
+  container.appendChild(addCard);
+
+  addCard.addEventListener("click", () => {
+    openTopicModal();
+  });
+}
+
+/**
+ * Open create topic modal
+ */
+function openTopicModal() {
+  const modal = document.getElementById("topic-modal");
+  const input = document.getElementById("topic-name");
+  const title = document.getElementById("topic-modal-title");
+
+  title.textContent = "Add Topic";
+  input.value = "";
+  delete input.dataset.editId;
+
+  modal.classList.add("show");
+  modal.style.display = "flex";
+}
+
+/**
+ * Open edit topic modal
+ */
+function openEditTopicModal(topic) {
+  const modal = document.getElementById("topic-modal");
+  const input = document.getElementById("topic-name");
+  const title = document.getElementById("topic-modal-title");
+
+  title.textContent = "Edit Topic";
+  input.value = topic.name;
+  input.dataset.editId = topic.id;
+
+  modal.classList.add("show");
+  modal.style.display = "flex";
+}
+
+/**
+ * Close topic modal
+ */
+function closeTopicModal() {
+  const modal = document.getElementById("topic-modal");
+  const input = document.getElementById("topic-name");
+
+  modal.classList.remove("show");
+  modal.style.display = "none";
+
+  input.value = "";
+  delete input.dataset.editId;
+}
+
+/**
+ * Save topic (create or edit)
+ */
+async function handleSaveTopic() {
+  const input = document.getElementById("topic-name");
+  const topicName = input.value.trim();
+  const editId = input.dataset.editId;
+
+  if (!topicName) {
+    showNotification("Please enter a topic name", "error");
+    return;
+  }
+
+  try {
+    const authToken = getAuthToken();
+    if (!authToken) {
+      showNotification("User not authenticated", "error");
+      return;
+    }
+
+    if (editId) {
+      // Edit topic
+      const response = await fetch(
+        `${API_BASE_URL}/subjects/${currentSubjectId}/topics/${editId}`,
+        {
+          method: "PUT",
+          headers: {
+            Authorization: `Bearer ${authToken}`,
+            "Content-Type": "application/json",
+          },
+          body: JSON.stringify({ name: topicName }),
+        }
+      );
+
+      if (!response.ok) {
+        throw new Error("Failed to update topic");
+      }
+
+      showNotification("Topic updated successfully!", "success");
+    } else {
+      // Create topic
+      const response = await fetch(
+        `${API_BASE_URL}/subjects/${currentSubjectId}/topics/create`,
+        {
+          method: "POST",
+          headers: {
+            Authorization: `Bearer ${authToken}`,
+            "Content-Type": "application/json",
+          },
+          body: JSON.stringify({ name: topicName }),
+        }
+      );
+
+      if (!response.ok) {
+        throw new Error("Failed to create topic");
+      }
+
+      showNotification("Topic created successfully!", "success");
+    }
+
+    closeTopicModal();
+    loadTopics();
+  } catch (error) {
+    console.error("Error saving topic:", error);
+    showNotification(error.message || "Failed to save topic", "error");
+  }
+}
+
+/**
+ * Delete topic
+ */
+async function deleteTopic(topicId) {
+  try {
+    const authToken = getAuthToken();
+    if (!authToken) {
+      showNotification("User not authenticated", "error");
+      return;
+    }
+
+    const response = await fetch(
+      `${API_BASE_URL}/subjects/${currentSubjectId}/topics/${topicId}`,
+      {
+        method: "DELETE",
+        headers: {
+          Authorization: `Bearer ${authToken}`,
+        },
+      }
+    );
+
+    if (!response.ok) {
+      throw new Error("Failed to delete topic");
+    }
+
+    showNotification("Topic deleted successfully!", "success");
+    loadTopics();
+  } catch (error) {
+    console.error("Error deleting topic:", error);
+    showNotification("Failed to delete topic", "error");
+  }
+}
+
+/**
+ * Open topic menu modal to view files
+ */
+async function openTopicMenuModal(topic) {
+  currentTopicId = topic.id;
+
+  const modal = document.getElementById("topic-menu-modal");
+  const titleSpan = document.getElementById("topic-menu-name");
+  const filesList = document.getElementById("topic-files-list");
+
+  titleSpan.textContent = topic.name;
+
+  // Update Google Drive status
+  updateModalDriveStatus();
+
+  try {
+    const authToken = getAuthToken();
+    if (!authToken) {
+      showNotification("User not authenticated", "error");
+      return;
+    }
+
+    const response = await fetch(
+      `${API_BASE_URL}/subjects/${currentSubjectId}/topics/${topic.id}/notes`,
+      {
+        headers: {
+          Authorization: `Bearer ${authToken}`,
+        },
+      }
+    );
+
+    if (!response.ok) {
+      throw new Error("Failed to load files");
+    }
+
+    const data = await response.json();
+    const files = data.notes || [];
+
+    if (files.length === 0) {
+      filesList.innerHTML =
+        '<p style="text-align: center; padding: 20px; color: #999;">No files yet</p>';
+    } else {
+      filesList.innerHTML = files
+        .map(
+          (file) => `
+        <div class="file-item">
+          <div class="file-info">
+            <i class="fas fa-file-pdf"></i>
+            <div>
+              <p class="file-name">${file.title || file.file_name}</p>
+              <p class="file-size">PDF Document</p>
+            </div>
+          </div>
+          <div class="file-actions">
+            <button class="btn-icon" onclick="downloadFile('${
+              file.file_url
+            }', '${file.file_name}')">
+              <i class="fas fa-download"></i>
+            </button>
+            <button class="btn-icon delete" onclick="deleteFile(${file.id})">
+              <i class="fas fa-trash"></i>
+            </button>
+          </div>
+        </div>
+      `
+        )
+        .join("");
+    }
+  } catch (error) {
+    console.error("Error loading files:", error);
+    filesList.innerHTML = '<p style="color: red;">Failed to load files</p>';
+  }
+
+  modal.classList.add("show");
+  modal.style.display = "flex";
+}
+
+/**
+ * Close topic menu modal
+ */
+function closeTopicMenuModal() {
+  const modal = document.getElementById("topic-menu-modal");
+  modal.classList.remove("show");
+  modal.style.display = "none";
+  currentTopicId = null;
+}
+
+/**
+ * Handle drag over
+ */
+function handleDragOver(e) {
+  e.preventDefault();
+  e.stopPropagation();
+  document.getElementById("drag-drop-area").classList.add("dragover");
+}
+
+/**
+ * Handle drag leave
+ */
+function handleDragLeave(e) {
+  e.preventDefault();
+  e.stopPropagation();
+  document.getElementById("drag-drop-area").classList.remove("dragover");
+}
+
+/**
+ * Handle file drop
+ */
+function handleFileDrop(e) {
+  e.preventDefault();
+  e.stopPropagation();
+  document.getElementById("drag-drop-area").classList.remove("dragover");
+
+  const files = e.dataTransfer.files;
+  handleFiles(files);
+}
+
+/**
+ * Handle file select
+ */
+function handleFileSelect(e) {
+  const files = e.target.files;
+  handleFiles(files);
+}
+
+/**
+ * Handle file upload
+ */
+async function handleFiles(files) {
+  if (!currentSubjectId) {
+    showNotification("Subject not found", "error");
+    return;
+  }
+
+  if (!currentTopicId) {
+    showNotification("Please select a topic first", "error");
+    return;
+  }
+
+  // Check Google Drive connection
+  if (!isGoogleDriveConnected || !currentAccessToken) {
+    showNotification("Please connect to Google Drive first", "error");
+    return;
+  }
+
+  const filesList = Array.from(files);
+
+  if (filesList.length === 0) {
+    showNotification("No files selected", "error");
+    return;
+  }
+
+  // Filter PDF files only
+  const pdfFiles = filesList.filter((file) => file.type === "application/pdf");
+
+  if (pdfFiles.length !== filesList.length) {
+    showNotification("Only PDF files are supported", "error");
+  }
+
+  if (pdfFiles.length === 0) return;
+
+  try {
+    const authToken = getAuthToken();
+    if (!authToken) {
+      showNotification("User not authenticated", "error");
+      return;
+    }
+
+    // Show upload indicator
+    showUploadIndicator();
+
+    // Upload each file
+    for (const file of pdfFiles) {
+      await uploadFileToDriveAndSave(file, authToken);
+    }
+
+    showNotification(
+      `${pdfFiles.length} file(s) uploaded successfully!`,
+      "success"
+    );
+
+    // Reload the topic to show new files
+    const topic = topics.find((t) => t.id === currentTopicId);
+    if (topic) {
+      openTopicMenuModal(topic);
+    }
+  } catch (error) {
+    console.error("Error uploading files:", error);
+    showNotification("Failed to upload files", "error");
+  } finally {
+    // Hide upload indicator
+    hideUploadIndicator();
+  }
+}
+
+/**
+ * Upload file to Google Drive and save metadata to backend
+ */
+async function uploadFileToDriveAndSave(file, authToken) {
+  try {
+    // First, upload to Google Drive
+    const driveResponse = await uploadToGoogleDrive(file);
+
+    // Then save metadata to backend
+    const metadata = {
+      title: file.name.replace(".pdf", ""),
+      file_name: file.name,
+      file_url: driveResponse.webViewLink,
+      google_drive_file_id: driveResponse.id,
+    };
+
+    const response = await fetch(
+      `${API_BASE_URL}/subjects/${currentSubjectId}/topics/${currentTopicId}/notes/create`,
+      {
+        method: "POST",
+        headers: {
+          Authorization: `Bearer ${authToken}`,
+          "Content-Type": "application/json",
+        },
+        body: JSON.stringify(metadata),
+      }
+    );
+
+    if (!response.ok) {
+      throw new Error(`Failed to save file metadata`);
+    }
+
+    return response.json();
+  } catch (error) {
+    console.error("Error in upload process:", error);
+    throw error;
+  }
+}
+
+/**
+ * Upload file to Google Drive using REST API
+ */
+async function uploadToGoogleDrive(file) {
+  const accessToken = getGoogleAccessToken();
+  if (!accessToken) {
+    throw new Error("No Google Drive access token");
+  }
+
+  // Create metadata for the file
+  const metadata = {
+    name: file.name,
+    mimeType: file.type,
+  };
+
+  // Create FormData for multipart upload
+  const formData = new FormData();
+  formData.append(
+    "metadata",
+    new Blob([JSON.stringify(metadata)], { type: "application/json" })
+  );
+  formData.append("file", file);
+
+  const response = await fetch(
+    "https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart",
+    {
+      method: "POST",
+      headers: {
+        Authorization: `Bearer ${accessToken}`,
+      },
+      body: formData,
+    }
+  );
+
+  if (!response.ok) {
+    const error = await response.json();
+
+    // Check if token is expired or invalid
+    if (response.status === 401 || error.error.code === 401) {
+      // Token expired, disconnect and prompt user to reconnect
+      setGoogleDriveConnected(false);
+      throw new Error(
+        "Google Drive access token expired. Please reconnect to Google Drive."
+      );
+    }
+
+    throw new Error(`Google Drive upload failed: ${error.error.message}`);
+  }
+
+  const result = await response.json();
+
+  // Make the file publicly viewable
+  await setFilePublic(result.id, accessToken);
+
+  // Get the web view link
+  result.webViewLink = `https://drive.google.com/file/d/${result.id}/view`;
+
+  return result;
+}
+
+/**
+ * Make Google Drive file publicly viewable
+ */
+async function setFilePublic(fileId, accessToken) {
+  const permission = {
+    type: "anyone",
+    role: "reader",
+  };
+
+  await fetch(
+    `https://www.googleapis.com/drive/v3/files/${fileId}/permissions`,
+    {
+      method: "POST",
+      headers: {
+        Authorization: `Bearer ${accessToken}`,
+        "Content-Type": "application/json",
+      },
+      body: JSON.stringify(permission),
+    }
+  );
+}
+
+/**
+ * Download file
+ */
+function downloadFile(url, fileName) {
+  const link = document.createElement("a");
+  link.href = url;
+  link.download = fileName || "download.pdf";
+  link.click();
+}
+
+/**
+ * Delete file (note)
+ */
+async function deleteFile(fileId) {
+  if (!confirm("Delete this file?")) return;
+
+  try {
+    const authToken = getAuthToken();
+    if (!authToken) {
+      showNotification("User not authenticated", "error");
+      return;
+    }
+
+    const response = await fetch(
+      `${API_BASE_URL}/subjects/${currentSubjectId}/topics/${currentTopicId}/notes/${fileId}`,
+      {
+        method: "DELETE",
+        headers: {
+          Authorization: `Bearer ${authToken}`,
+        },
+      }
+    );
+
+    if (!response.ok) {
+      throw new Error("Failed to delete file");
+    }
+
+    showNotification("File deleted successfully!", "success");
+    // Reload topic menu
+    const topicId = topics.find((t) => t.id === currentTopicId)?.id;
+    if (topicId) {
+      const topic = topics.find((t) => t.id === topicId);
+      if (topic) openTopicMenuModal(topic);
+    }
+  } catch (error) {
+    console.error("Error deleting file:", error);
+    showNotification("Failed to delete file", "error");
+  }
+}
+
+/**
+ * Show notification
+ */
+function showNotification(message, type = "info") {
+  const notification = document.createElement("div");
+  notification.className = `notification notification-${type}`;
+  notification.textContent = message;
+
+  let bgColor = "#2196F3";
+  if (type === "success") {
+    bgColor = "#4CAF50";
+  } else if (type === "error") {
+    bgColor = "#f44336";
+  }
+
+  notification.style.cssText = `
+    position: fixed;
+    top: 20px;
+    right: 20px;
+    padding: 12px 20px;
+    background-color: ${bgColor};
+    color: white;
+    border-radius: 4px;
+    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
+    z-index: 10000;
+    font-size: 14px;
+    animation: slideIn 0.3s ease-in-out;
+  `;
+
+  document.body.appendChild(notification);
+
+  setTimeout(() => {
+    notification.remove();
+  }, 3000);
+}
+
+/**
+ * Show upload loading indicator
+ */
+function showUploadIndicator() {
+  const indicator = document.getElementById("upload-indicator");
+  const dragDropArea = document.getElementById("drag-drop-area");
+
+  if (indicator && dragDropArea) {
+    // Make drag-drop-area position relative for absolute positioning of indicator
+    dragDropArea.style.position = "relative";
+    indicator.style.display = "flex";
+  }
+}
+
+/**
+ * Hide upload loading indicator
+ */
+function hideUploadIndicator() {
+  const indicator = document.getElementById("upload-indicator");
+  const dragDropArea = document.getElementById("drag-drop-area");
+
+  if (indicator && dragDropArea) {
+    indicator.style.display = "none";
+    dragDropArea.style.position = "";
+  }
+}
diff --git a/frontend/js/topic.js b/frontend/js/topic.js
new file mode 100644
index 0000000..e69de29
-- 
2.48.1

